<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>poutine</title>
    <link>http://localhost:1313/poutine/</link>
    <description>Recent content on poutine</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/poutine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arbitrary Code Execution from Untrusted Code Changes</title>
      <link>http://localhost:1313/poutine/rules/untrusted_checkout_exec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/untrusted_checkout_exec/</guid>
      <description>Description The workflow appears to checkout untrusted code from a fork and uses a command that is known to allow code execution.&#xA;Using workflows with pull_request_target has the added benefit (as opposed to pull_request) of allowing access to secrets even in forked repositories. There can be good reasons to do so if you need to use API Keys to talk to some external services or want to interact with the GitHub API with write permissions.</description>
    </item>
    <item>
      <title>CI Component with a Known Vulnerability used</title>
      <link>http://localhost:1313/poutine/rules/known_vulnerability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/known_vulnerability/</guid>
      <description> Description A CI component was found to be vulnerable to a publicly known security vulnerability from the Open Source Vulnerability Database (OSV)&#xA;GitHub Actions GitHub Actions workflows using third-party GitHub Actions with known vulnerabilities could compromise the security of the workflow and the repository.&#xA;Remmediation Upgrade the affected component to a non-vulnerable version or remove the component from the workflow.&#xA;See Also GitHub Docs: Keeping your actions up to date with Dependabot GitHub Docs: Exporting a software bill of materials for your repository </description>
    </item>
    <item>
      <title>CI Debug Enabled</title>
      <link>http://localhost:1313/poutine/rules/debug_enabled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/debug_enabled/</guid>
      <description>Description The workflow is configured to increase the verbosity of the runner. This can potentially expose sensitive information.&#xA;Remediation Gitlab CI In the workflow file, remove the CI_DEBUG_TRACE or CI_DEBUG_SERVICES variable in the job definition or set to false.&#xA;Recommended job_name: variables: CI_DEBUG_TRACE: &amp;#34;false&amp;#34; # Or, better, simply omit those variables as they default to `false` anyway. CI_DEBUG_SERVICES: &amp;#34;false&amp;#34; Anti-Pattern job_name: variables: CI_DEBUG_TRACE: &amp;#34;true&amp;#34; CI_DEBUG_SERVICES: &amp;#34;true&amp;#34; See Also https://docs.gitlab.com/ee/ci/variables/index.html#enable-debug-logging https://docs.</description>
    </item>
    <item>
      <title>Default permissions used on risky events</title>
      <link>http://localhost:1313/poutine/rules/default_permissions_on_risky_events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/default_permissions_on_risky_events/</guid>
      <description>Description If a GitHub Actions workflow does not declare permissions for its job, it inherits the default permissions configured in the GitHub Actions settings of the repository. For organizations created before February 2023, which is the case for a large number of important OSS projects and corporations, the default permissions used to grant read-write access to the repository and even new repositories will inherit the permissions of the old, insecure defaults from the organization.</description>
    </item>
    <item>
      <title>Github Action from Unverified Creator used</title>
      <link>http://localhost:1313/poutine/rules/github_action_from_unverified_creator_used/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/github_action_from_unverified_creator_used/</guid>
      <description>Description Usage of the following GitHub Actions repositories was detected in workflows or composite actions, but their owner is not a verified creator.&#xA;Remediation In the workflow file, replace the action with a verified creator&amp;rsquo;s action if possible. Verified creators can be found in the GitHub Marketplace.&#xA;Even if the action is published by a Verified Creator, it should not imply that the action is secure or still maintained. A popular action (with many stars and/or downloads) neither implies that it is safe.</description>
    </item>
    <item>
      <title>If condition always evaluates to true</title>
      <link>http://localhost:1313/poutine/rules/if_always_true/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/if_always_true/</guid>
      <description>Description GitHub Actions expressions used in if condition of jobs or steps must not contain extra characters or spaces. Otherwise, the condition is always evaluated to true.&#xA;This can lead to logic bugs and possibly expose parts of the workflow only meant to be executed in secure contexts.&#xA;Remediation Recommended name: Conditionally process PR on: pull_request_target: types: [opened, synchronize, reopened] jobs: process-pr: runs-on: ubuntu-latest steps: - name: Auto-format markdown files if: github.</description>
    </item>
    <item>
      <title>Injection with Arbitrary External Contributor Input</title>
      <link>http://localhost:1313/poutine/rules/injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/injection/</guid>
      <description>Description The pipeline contains an injection into bash or JavaScript with an expression that can contain user input. Prefer placing the expression in an environment variable instead of interpolating it directly into a script.&#xA;Remediation GitHub Actions Recommended on: pull_request_target: branches: [main] types: [opened, synchronize] permissions: {} jobs: lint: runs-on: ubuntu-latest permissions: pull-requests: write steps: - name: Validate pull request title and body uses: actions/github-script@v60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1 env: PR_TITLE: ${{ github.</description>
    </item>
    <item>
      <title>Job uses all secrets</title>
      <link>http://localhost:1313/poutine/rules/job_all_secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/job_all_secrets/</guid>
      <description>Description A GitHub Actions job was found to have access to all secrets. This may be unnecessary and expose sensitive information to the job.&#xA;This can occur when the secrets object is serialized to JSON. For example:&#xA;env: ALL_SECRETS: ${{ toJSON(secrets) }} Accessing the secrets object using a dynamic key will also expose all secrets to the job. For example:&#xA;strategy: matrix: env: [PROD, DEV] env: GH_TOKEN: ${{ secrets[format(&amp;#39;GH_PAT_%s&amp;#39;, matrix.</description>
    </item>
    <item>
      <title>Pull Request Runs on Self-Hosted GitHub Actions Runner</title>
      <link>http://localhost:1313/poutine/rules/pr_runs_on_self_hosted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/pr_runs_on_self_hosted/</guid>
      <description>Description This job runs on a self-hosted GitHub Actions runner in a workflow that is triggered by a pull_request event (or other Pull Request related events). Using self-hosted runners in Public repositories, especially when processing events for pull_request events is considered highly risky as it allows external threats to run arbitrary code on that self-hosted runner compute instance.&#xA;While the &amp;ldquo;Maximum access for pull requests from public forked repositories&amp;rdquo; is read, meaning that secrets (either repo-level or organization-level) are not exposed immediately accessible to the pull request workflow, the attacker can still directly run arbitrary code, without leveraging any vulnerability.</description>
    </item>
    <item>
      <title>Unpinnable CI component used</title>
      <link>http://localhost:1313/poutine/rules/unpinnable_action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/poutine/rules/unpinnable_action/</guid>
      <description>Description The rule identifies CI components that are unpinnable (often seen in the context of &amp;ldquo;composite&amp;rdquo; GitHub Actions), because they depend on mutable supply chain components. Pinning using a cryptographic hash or signature is considered a Best Practice to ensure that a specific version of a component is used, which can help in making builds more reproducible and trustworthy. However, if a component, such as a GitHub Action, is architected in a way that depends on other components, which can be compromised, pinning it does not effectively mitigate the risks associated with mutable supply chain components.</description>
    </item>
  </channel>
</rss>
