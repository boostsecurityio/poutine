# METADATA
# title: Build Component with a Known Vulnerability used
# description: |-
#   The workflow or action depends on a GitHub Action with known vulnerabilities.
# related_resources:
# - ref: https://osv.dev/
#   description: Source Advisory Database
# custom:
#   level: warning
package rules.known_vulnerability_in_build_component

import data.external.osv.advisories
import data.poutine
import rego.v1

rule := poutine.rule(rego.metadata.chain())

step_advisory(step) = advisory if {
	parts = split(step.uses, "@")
	action := parts[0]
	version := trim_left(parts[1], "v")
	advisory := advisories[osv_id]
	advisory.package_name == action

	regex.match("^[0-9]+(\\.[0-9]+)*?$", version)

	semver.constraint_check(advisory.vulnerable_version_ranges[_], version)
}

results contains poutine.finding(rule, pkg.purl, {
	"path": workflow.path,
	"line": step.lines.uses,
	"job": job.id,
	"step": i,
	"osv_id": advisory.osv_id,
	"details": sprintf("Package: %s", [advisory.package_name]),
}) if {
	pkg = input.packages[_]
	workflow = pkg.github_actions_workflows[_]
	job := workflow.jobs[_]
	step := job.steps[i]
	advisory := step_advisory(step)
}

results contains poutine.finding(rule, pkg.purl, {
	"path": action.path,
	"line": step.lines.uses,
	"step": i,
	"osv_id": advisory.osv_id,
	"details": sprintf("Package: %s", [advisory.package_name]),
}) if {
	pkg = input.packages[_]
	action = pkg.github_actions_metadata[_]
	action.runs.using == "composite"
	step := action.runs.steps[i]
	advisory := step_advisory(step)
}
