# METADATA
# title: Build Platform with a Known Vulnerability used
# description: |-
#   The build or SCM provider used has a known vulnerability.
# related_resources:
# - ref: https://osv.dev/
#   description: Source Advisory Database
# custom:
#   level: warning
package rules.known_vulnerability_in_build_platform

import data.external.build_platform.advisories
import data.poutine
import rego.v1

rule := poutine.rule(rego.metadata.chain())

provider_advisory(provider, provider_version) = advisory if {
	version := provider_version
	advisory := advisories[provider][osv_id]

	regex.match("^[0-9]+(\\.[0-9]+)*?$", version)

	semver.constraint_check(advisory.vulnerable_version_ranges[_], version)
}

results contains poutine.finding(rule, input.provider, {
	"osv_id": advisory.osv_id,
	"details": sprintf("Provider: %s", [input.provider]),
}) if {
	advisory := provider_advisory(input.provider, input.version)
}